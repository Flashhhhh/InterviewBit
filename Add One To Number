#include<stdio.h>
#include<math.h>
/**
 * @input A : Integer array
 * @input n1 : Integer array's ( A ) length
 * 
 * @Output Integer array. You need to malloc memory for result array, and fill result's length in length_of_array
 */
void reverse(int* A, int n1){
    int i=0,j=n1-1,temp;
    while(i<n1/2){
        temp=A[i];
        A[i]=A[j];
        A[j]=temp;
        i++;j--;
    }
}
int* plusOne(int* A, int n1, int *length_of_array) {
    reverse(A,n1);
    int carry=1,sum,i;
    for(i=0;i<n1;i++)
    {
        if((A[i]+carry)/10==1 ){
            A[i]=(A[i]+carry)%10;
            carry=1;
        }
        else{
            A[i]=(A[i]+carry)%10;
            carry=0;
        }
    }
    if(carry==1) A[n1]=carry;// adding another element if there is a carry in the end
    if(carry!=1){ 
      while(A[n1-1]==0)//removing any 0's in the most significant bit side
        n1--;
    } 
    reverse(A,n1+carry);
    int k=0;
    while(k<(n1+carry))
    { printf("%d ",A[k]);
    k++;}
   
    
    
    return 0;
     
 
	// SAMPLE CODE
        /*
         * *length_of_array = n1 + 1; // length of result array
         * int *result = (int *) malloc(*length_of_array * sizeof(int));
         * // DO STUFF HERE. NOTE : length_of_array can be n1 OR n1 + 1. 
         * return result;
         */
}
